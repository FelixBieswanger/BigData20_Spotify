version: "3"

networks:
  kafka_cluster:
    driver: bridge

services:
  zookeeper:
    networks: 
      - kafka_cluster
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    networks: 
      - kafka_cluster
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_LISTENERS: LISTENER_INSIDE://kafka:29092,LISTENER_OUTSIDE://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INSIDE://kafka:29092,LISTENER_OUTSIDE://192.168.178.40:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INSIDE:PLAINTEXT,LISTENER_OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INSIDE
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "songids:1:1"
    depends_on:
      - zookeeper

  neo4j:
      networks: 
        - kafka_cluster
      container_name: neo4j
      image: neo4j:4.0.3-enterprise
      ports:
        - 7474:7474
        - 6477:6477
        - 7687:7687
      volumes: 
        - ./neo4j/data:/data
        - ./neo4j/conf:/conf
        - ./neo4j/logs:/logs
        - ./neo4j/plugins:/plugins
      environment:
        NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
        NEO4J_AUTH: neo4j/streams
        NEO4J_dbms_connector_http_listen__address: :7474
        NEO4J_dbms_connector_https_listen__address: :6477
        NEO4J_dbms_connector_bolt_listen__address: :7687
        NEO4J_dbms_logs_debug_level: DEBUG
        NEO4J_apoc_import_file_enabled: "true"
        NEO4J_kafka_auto_offset_reset: "latest"
        NEO4J_kafka_zookeeper_connect: zookeeper:2181
        NEO4J_kafka_bootstrap_servers: kafka:29092
        NEO4J_kafka_group_id: "neo4j"
        NEO4J_kafka_client_id: "neo4j"
        NEO4J_kafka_enable_auto_commit: "false"
        NEO4J_kafka_key_deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
        NEO4J_kafka_value_deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
        NEO4J_streams_source_enabled: "true"
        NEO4J_streams_source_topic_nodes_dbtest: Track{*}
        NEO4J_streams_sink_enabled_to_dbtest: "true"
        NEO4J_streams_sink_topic_cypher_createTrack_to_dbtest: "MERGE (t:Track {id: event.id, name: event.name , duration_ms: event.duration_ms, explicit:event.explicit, artists:event.artists, danceability:event.danceability, energy:event.energy, key: event.key, loudness: event.loudness, mode: event.mode, speechiness: event.speechiness, acousticness: event.acousticness, instrumentalness: event.instrumentalness, liveness: event.liveness, valence: event.valence, tempo: event.tempo, time_signature: event.time_signature})"
        NEO4J_streams_sink_topic_cypher_createArtistandRel_to_dbtest: "MATCH(t:Track {id: event.trackid})
        MERGE (a:Artist {id: event.id, name: event.name, popularity:event.popularity, followers:event.followers, genres:event.genres})
        MERGE (a)-[:produced]->(t)"
        NEO4J_streams_sink_topic_cypher_createGenre_to_dbtest: "MATCH (a:Artist {id:event.artistid})
        MERGE (g:Genre {name:event.name})
        MERGE (a)-[:belongs_to]->(g)"